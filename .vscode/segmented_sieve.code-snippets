{
	"prime or not (L,R)": {
		"prefix": "segmented_sieve",
		"body": [
		  "vector<bool> segmentedSieve(ll L, ll R) {",
		  "    // generate all primes up to sqrt(R)",
		  "    ll lim = sqrt(R);",
		  "    vector<bool> mark(lim + 1, false);",
		  "    vl primes;",
		  "    for (ll i = 2; i <= lim; ++i) {",
		  "        if (!mark[i]) {",
		  "            primes.emplace_back(i);",
		  "            for (long long j = i * i; j <= lim; j += i)",
		  "                mark[j] = true;",
		  "        }",
		  "    }",
		  "",
		  "    vector<bool> isPrime(R - L + 1, true);",
		  "    for (ll i : primes)",
		  "        for (ll j = max(i * i, (L + i - 1) / i * i); j <= R; j += i)",
		  "            isPrime[j - L] = false;",
		  "    if (L == 1)",
		  "        isPrime[0] = false;",
		  "    return isPrime;",
		  "}",
		  "",
		  ""
		],
		"description": "prime or not (L,R)"
	  }
}